#!/usr/bin/python
# Copyright (c) Members of the EGEE Collaboration. 2004. 
# See http://www.eu-egee.org/partners/ for details on the copyright
# holders.  
#
# Licensed under the Apache License, Version 2.0 (the "License"); 
# you may not use this file except in compliance with the License. 
# You may obtain a copy of the License at 
#
#     http://www.apache.org/licenses/LICENSE-2.0 
#
# Unless required by applicable law or agreed to in writing, software 
# distributed under the License is distributed on an "AS IS" BASIS, 
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
# See the License for the specific language governing permissions and 
# limitations under the License.

import sys
import re
import time
import shlex
import subprocess
from threading import Thread

from TorqueInfoUtils import CommonUtils
from TorqueInfoUtils import QStatHandler
from TorqueInfoUtils import PBSNodesHandler


def main():
    
    now = time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())

    try:
        if len(sys.argv) <> 2:
            raise Exception("Usage: info-dynamic-pbs <config-file>")
            
        config = CommonUtils.readConfigFile(sys.argv[1])

    except Exception, ex:
        sys.stderr.write(str(ex) + '\n')
        sys.exit(1)


    glue1QueueTable = dict()
    glue2QueueTable = dict()
    managerTable = None
    allQueues = set()
    qInfoHandlers = dict()
    
    try:
    
        if config['outputformat'] <> "glue2":
        
            glue1QueueTable = CommonUtils.parseLdif(config["bdii-configfile"], 'GLUE1')
        
            for queue in glue1QueueTable.values():
                allQueues.add(queue)

        if config['outputformat'] <> "glue1":
        
            glue2QueueTable, managerTable = CommonUtils.parseLdif(config["bdii-configfile"], 'GLUE2')

            for queue in glue2QueueTable.values():
                allQueues.add(queue)

        lrmsVer = QStatHandler.parseLRMSVersion(config["pbs-host"])
        
        cpuInfoHandler = PBSNodesHandler.parseCPUInfo(config["pbs-host"])
    
        for queue in allQueues:
            qInfoHandlers[queue] = QStatHandler.parseQueueInfo(queue, config["pbs-host"])
            
    except Exception, ex:
        sys.stderr.write(str(ex) + '\n')
        sys.exit(2)

    out = sys.stdout
    
    if config['outputformat'] <> "glue2":

        for glue1DN in glue1QueueTable:
        
            queue = glue1QueueTable[glue1DN]
            qInfo = qInfoHandlers[queue]
            
            out.write(glue1DN + '\n')
            out.write('GlueCEInfoLRMSVersion: %s\n' % lrmsVer)
            
            out.write('GlueCEInfoTotalCPUs: %d\n' % cpuInfoHandler.totalCPU)
            out.write('GlueCEPolicyAssignedJobSlots: %d\n' % cpuInfoHandler.totalCPU)
            out.write('GlueCEStateFreeCPUs: %d\n' % cpuInfoHandler.freeCPU)
            
            if qInfo.defaultCPUtime <> -1:
                out.write('GlueCEPolicyMaxCPUTime: %d\n' % (qInfo.defaultCPUtime / 60))

            if qInfo.maxCPUtime <> -1:
                out.write('GlueCEPolicyMaxObtainableCPUTime: %d\n' % (qInfo.maxCPUtime / 60))
                
            if qInfo.maxTotJobs <> -1:
                out.write('GlueCEPolicyMaxTotalJobs: %d\n' % qInfo.maxTotJobs)
                
            if qInfo.policyPriority:
                out.write('GlueCEPolicyPriority: %s\n' % qInfo.policyPriority)
                
            if qInfo.maxRunJobs <> -1:
                out.write('GlueCEPolicyMaxRunningJobs: %d\n' % qInfo.maxRunJobs)
                
            if qInfo.maxTotJobs <> -1 and qInfo.maxRunJobs <> -1:
                out.write('GlueCEPolicyMaxWaitingJobs: %d\n' % (qInfo.maxTotJobs - qInfo.maxRunJobs))
                
            if qInfo.defaultWallTime <> -1:
                out.write('GlueCEPolicyMaxWallClockTime: %d\n' % (qInfo.defaultWallTime / 60))
                
            if qInfo.maxWallTime <> -1:
                out.write('GlueCEPolicyMaxObtainableWallClockTime: %d\n' % (qInfo.maxWallTime / 60))
                
            if qInfo.maxProcCount <> -1:
                out.write('GlueCEPolicyMaxSlotsPerJob: %d\n' % qInfo.maxProcCount)
 
            out.write('GlueCEStateStatus: %s\n' % qInfo.state)
            out.write('\n')


    if config['outputformat'] <> "glue1":

        for managerDN in managerTable:
        
            out.write(managerDN + '\n')
            out.write('GLUE2ManagerProductVersion: %s\n' % lrmsVer)
            out.write('GLUE2EntityCreationTime: %s\n' % now)
            out.write('\n')
            
        for glue2DN in glue2QueueTable:
            queue = glue2QueueTable[glue2DN]
            qInfo = qInfoHandlers[queue]
            
            out.write(glue2DN + '\n')
            if qInfo.defaultCPUtime <> -1:
                out.write('GLUE2ComputingShareDefaultCPUTime: %d\n' % qInfo.defaultCPUtime)
                
            if qInfo.maxCPUtime <> -1:
                out.write('GLUE2ComputingShareMaxCPUTime: %d\n' % qInfo.maxCPUtime)
                
            if qInfo.defaultWallTime <> -1:
                out.write('GLUE2ComputingShareDefaultWallTime: %d\n' % qInfo.defaultWallTime)
                
            if qInfo.maxWallTime <> -1:
                out.write('GLUE2ComputingShareMaxWallTime: %d\n' % qInfo.maxWallTime)
                
            if qInfo.maxProcCount <> -1:
                out.write('GLUE2ComputingShareMaxSlotsPerJob: %d\n' % qInfo.maxProcCount)
                
            if qInfo.maxRunJobs <> -1:
                out.write('GLUE2ComputingShareMaxRunningJobs: %d\n' % qInfo.maxRunJobs)
            
            #
            # TODO get info per vo (vomaxjobs-*)
            #      for the moment queue-wide values are used
            #    
            if qInfo.maxTotJobs <> -1:
                out.write('GLUE2ComputingShareMaxTotalJobs: %d\n' % qInfo.maxTotJobs)
                
            if qInfo.maxTotJobs <> -1 and qInfo.maxRunJobs <> -1:
                out.write('GLUE2ComputingShareMaxWaitingJobs: %d\n' % (qInfo.maxTotJobs - qInfo.maxRunJobs))
                
            if qInfo.maxMem <> -1:
                out.write('GLUE2ComputingShareMaxMainMemory: %d\n' % qInfo.maxMem)
                
            if qInfo.maxVMem <> -1:
                out.write('GLUE2ComputingShareMaxVirtualMemory: %d\n' % qInfo.maxVMem)
                
            out.write('GLUE2ComputingShareServingState: %s\n' % qInfo.state.lower())
            out.write('GLUE2EntityCreationTime: %s\n' % now)
            out.write('\n')



if __name__ == "__main__":
    main()


